package com.gt.gestfinance.service.impl;

import com.gt.gestfinance.entity.Exploitation;
import com.gt.gestfinance.entity.OperationType;
import com.gt.gestfinance.entity.Version;
import com.gt.gestfinance.exception.CustomException;
import com.gt.gestfinance.repository.BudgetRepository;
import com.gt.gestfinance.repository.ExploitationRepository;
import com.gt.gestfinance.repository.OperationRepository;
import com.gt.gestfinance.repository.VersionRepository;
import com.gt.gestfinance.service.IExploitationService;
import com.gt.gestfinance.service.IOperationService;
import com.gt.gestfinance.util.MPConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

/**
 * Classe Service de l'entit√© Budget
 *
 * @author <a href="mailto:claude-rodrigue.affodogandji@ace3i.com?">RODRIGUE
 * AFFODOGANDJI</a>
 * @version 1.0
 * @since 31/03/2018
 */
@Service
public class ExploitationService extends BaseEntityService<Exploitation, Integer> implements IExploitationService {

    private OperationRepository operationRepository;
    private VersionRepository versionRepository;
    private BudgetRepository budgetRepository;
    private IOperationService operationService;

    @Autowired
    public ExploitationService(ExploitationRepository repository) {
        super(repository);
    }

    @Override
    public VersionRepository getVersionRepository() {
        return versionRepository;
    }

    @Override
    public synchronized Exploitation save(Exploitation exploitation) throws CustomException {
        controlerLIntegriteDeLExploitation(exploitation);
        reconstructionDeLExploitation(exploitation);
        exploitation.setMontantTotal(0D);
        exploitation = super.save(exploitation);
        miseAJourDeLaVersion(exploitation, Version.MOTIF_AJOUT, exploitation.getIdentifiant());
        return exploitation;
    }

    private void reconstructionDeLExploitation(Exploitation exploitation) {
        if (exploitation.getBudgetParDefaut() != null && exploitation.getBudgetParDefaut().getIdentifiant() != null) {
            exploitation.setBudgetParDefaut(budgetRepository.findOne(exploitation.getBudgetParDefaut().getIdentifiant()));
        }
    }

    @Override
    public synchronized Exploitation saveAndFlush(Exploitation exploitation) throws CustomException {
        controlerLIntegriteDeLExploitation(exploitation);
        reconstructionDeLExploitation(exploitation);
        exploitation = super.saveAndFlush(exploitation);
        miseAJourDeLaVersion(exploitation, Version.MOTIF_MODIFICATION, exploitation.getIdentifiant());
        return exploitation;
    }

    private void controlerLIntegriteDeLExploitation(Exploitation exploitation) throws CustomException {
        if (exploitation.getLibelle() == null || exploitation.getLibelle().isEmpty()) {
            throw new CustomException(MPConstants.LE_LIBELLE_DU_EXPLOITATION_EST_OBLIGATOIRE);
        }
        Optional<Exploitation> op = ((ExploitationRepository) repository).findByLibelle(exploitation.getLibelle());
        if (op.isPresent() && !op.get().getIdentifiant().equals(exploitation.getIdentifiant())) {
            throw new CustomException(MPConstants.LE_LIBELLE_DU_EXPLOITATION_EXSTE_DEJA);
        }
    }

    @Override
    public Page<Exploitation> findAll(Pageable p) {
        Page<Exploitation> exploitationPage = super.findAll(p);
        return exploitationPage.map(exploitation -> {
            Double total = operationRepository
                    .sumByExploitationIdentifiantAndOperationType(
                            exploitation.getIdentifiant(), OperationType.PRODUIT)
                    + operationRepository
                    .sumByExploitationIdentifiantAndOperationType(
                            exploitation.getIdentifiant(), OperationType.EMPRUNT)
                    + operationRepository
                    .sumByExploitationIdentifiantAndOperationType(
                            exploitation.getIdentifiant(), OperationType.VIREMENT)
                    - operationRepository
                    .sumByExploitationIdentifiantAndOperationType(
                            exploitation.getIdentifiant(), OperationType.DEPENSE)
                    - operationRepository
                    .sumByExploitationIdentifiantAndOperationType(
                            exploitation.getIdentifiant(), OperationType.PRET);
            exploitation.setMontantTotal(total);
            return exploitation;
        });
    }

    @Override
    public List<Exploitation> recupererLaListeVersionnee(Integer[] ints) {
        return ((ExploitationRepository) repository).recupererLaListeVersionnee(ints);
    }

    @Override
    public boolean supprimerForcer(Integer exploitationId) throws CustomException {
        operationRepository.findByExploitationIdentifiant(exploitationId)
                .forEach(o -> {
                    try {
                        operationService.supprimerForcer(o.getIdentifiant());
                    } catch (CustomException e) {
                        Logger.getLogger(ExploitationService.class.getSimpleName()).warning(e.getMessage());
                    }
                });
        return supprimer(exploitationId);
    }

    @Override
    public boolean supprimer(Integer exploitationId) throws CustomException {
        if (!operationRepository.findByExploitationIdentifiant(exploitationId).isEmpty())
            throw new CustomException(MPConstants.L_EXPLOITATION_DEJA_UTILISER);
        Exploitation exploitation = findOne(exploitationId);
        if (super.delete(exploitationId)) {
            miseAJourDeLaVersion(exploitation, Version.MOTIF_SUPPRESSION, exploitationId);
            return true;
        }
        return false;
    }

    @Autowired
    public void setOperationRepository(OperationRepository operationRepository) {
        this.operationRepository = operationRepository;
    }

    @Autowired
    public void setVersionRepository(VersionRepository versionRepository) {
        this.versionRepository = versionRepository;
    }

    @Autowired
    public void setBudgetRepository(BudgetRepository budgetRepository) {
        this.budgetRepository = budgetRepository;
    }

    @Autowired
    public void setOperationService(IOperationService operationService) {
        this.operationService = operationService;
    }
}
